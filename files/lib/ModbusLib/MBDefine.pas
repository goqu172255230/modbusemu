unit MBDefine;{$mode objfpc}{$H+}interfaceuses Classes, MBBitsClasses;type  TRegMBTypes = (rgDiscrete=0,rgCoils=1,rgInput=3,rgHolding=4,rgNone=5);  TRegTypes = (rtSimpleWord,  // весь регистр рассматривается как единое целое               rtWord,        // весь регистр рассматривается как единое целое + представление в виде бит               rtWordByte,    // регистр содержит два независимых байта информации каждый из них представлен в виде набора бит               rtBit          // битовый регистр               );  TRegViewTypes = (rvtBit,                // регистр битовый                   rvtDWAnalog,           // регистр размером 16 бит, содержащий аналоговое значение                   rvtDWBits,             // регистр размером 16 бит, содержащий набор из 16 флагов состояний                   rvtBTLBBitHBAnalog,    // регистр размером 16 бит, каждый байт которого является самостоятельной еденицей, LB младший байт - набор 8 флагов, HB старший байт - аналоговое значение                   rvtBTLBAnalogHBBit,    // регистр размером 16 бит, каждый байт которого является самостоятельной еденицей, LB младший байт - аналоговое значение, HB старший байт - набор из 8-ми флагов                   rvtBTLBBitHBBit,       // регистр размером 16 бит, каждый байт которого является самостоятельной еденицей, LB младший байт - набор из 8-ми флагов, HB старший байт - набор из 8-ми флагов                   rvtBTLBAnalogHBAnalog  // регистр размером 16 битв, каждый байт которого является самостоятельной еденицей, LB младший байт - аналоговое значение, HB старший байт - аналоговое значение                   );  TBuilderTypeEnum = (btUnknown,btMBRTU,btMBASCII,btMBTCP);  TReaderTypeEnum = (rtUnknown,rtMBRTU,rtMBASCII,rtMBTCP);  TDeviceRangeItem = record   RegType  : TRegMBTypes;   RangeID  : String;   StartReg : Word;   Quantity : Word;  end;  TDeviceRangeArray = array of TDeviceRangeItem;  TRegBit = TWordBit;        // идентификаторы бит  TRegBits = set of TRegBit; // коллекция идентификаторов бит  TBitRegsValues   = array of Boolean;  TWordRegsValues  = array of Word;  TRegAddressArray = TWordRegsValues;  TBitRegsValueRange  = array of TBitRegsValues;  TWordRegsValueRange = array of TWordRegsValues;  TMBFunctionsEnum = (fnNon,fn01,fn02,fn03,fn04,fn05,fn06,fn07,fn08,fn11 = 11,                      fn12 = 12,fn15 = 15,fn16 = 16,fn17 = 17, fn20 = 20,                      fn21 = 21,fn22 = 22,fn23 = 23,fn24 = 24, fn43_13 = 56,                      fn43_14 = 57, fn72 = 72, fn110 = 110);  TMBTCPFunctionEnum = (fnTNon, fnT01, fnT02, fnT03, fnT04, fnT05 , fnT06,                        fnT15 = 15, fnT16 = 16, fnT20 = 20, fnT21 = 21,                        fnT22 = 22, fnT23 = 23, fnT24 = 24, fnT43_13 = 56,                        fnT43_14 = 57, fnT72 = 72, fnT110 = 110);  TMBFunctionsEnumSimple = (sfnNon,sfn01,sfn02,sfn03,sfn04,sfn05,sfn06,sfn07,sfn08,sfn11,                            sfn12,sfn15,sfn16,sfn17,sfn20,sfn21,sfn22,sfn23,sfn24,sfn43_13,                            sfn43_14,sfn72,sfn110);  TMBTCPFunctionEnumSimple = (sfnTNon,sfnT01,sfnT02,sfnT03,sfnT04,sfnT05,sfnT06,                              sfnT15,sfnT16,sfnT20,sfnT21,sfnT22,sfnT23,sfnT24,sfnT43_13,                              sfnT43_14,sfnT72,sfnT110);  TMBFunctionsSet = set of TMBFunctionsEnum;  TMBTCPFunctionsSet = set of TMBTCPFunctionEnum;  TMBFunctionsSimpleSet = set of TMBFunctionsEnumSimple;  TMBTCPFunctionsSimpleSet = set of TMBTCPFunctionEnumSimple;const  MAXWORD        = 65535;  MBRTUMinDevNum = 1;  MBRTUMaxDevNum = 247;  MBTCPMinDevNum = 0;  MBTCPMaxDevNum = 255;  MBFunctionsNameRU : array [TMBFunctionsEnumSimple] of String = ('Функция ','Функция 1','Функция 2','Функция 3',                                                            'Функция 4','Функция 5','Функция 6','Функция 7',                                                            'Функция 8','Функция 11','Функция 12','Функция 15',                                                            'Функция 16','Функция 17','Функция 20','Функция 21',                                                            'Функция 22','Функция 23','Функция 24','Функция 43/13',                                                            'Функция 43/14','Функция 72','Функция 110');  MBRTUFunctionsSet : TMBFunctionsSet = [fnNon, fn01, fn02, fn03, fn04, fn05,                                         fn06, fn07, fn08, fn11, fn12, fn15,                                         fn16, fn17, fn20, fn21, fn22, fn23,                                         fn24, fn43_13, fn43_14, fn72, fn110];  MBTCPFunctionsSet : TMBTCPFunctionsSet = [fnTNon, fnT01, fnT02, fnT03, fnT04,                                            fnT05, fnT06, fnT15, fnT16, fnT20,                                            fnT21, fnT22, fnT23, fnT24, fnT43_13,                                            fnT43_14, fnT72, fnT110];type  TReadPacketEventType = (rpError, rpEndRead, rpStartRead);  TMBSubrangeStateOfRange = (ssrIsInRange, ssrNotIncluded, ssrRangesAreEqual, ssrOutsideLeftEdge, ssrOutsideRightEdge, ssrLargerRange);  TMBSubrangeStateOfRangeSet = set of TMBSubrangeStateOfRange;  TMBSubrangeStateOfRangeArray = array of TMBSubrangeStateOfRange;  PMBRegistersRange = ^TMBRegistersRange;  TMBRegistersRange = packed record   StartAddres : Cardinal;   Count       : Word;  end;  TMBRegistersRangeArray = array of TMBRegistersRange;  PMBRegistersRangeClassic = ^TMBRegistersRangeClassic;  TMBRegistersRangeClassic = packed record   case Integer of   0 : (StartAddres : Word;        Count       : Word);   1 : (AllInOne : Cardinal);        end;  TMBRegistersRangeClassicArray = array of TMBRegistersRangeClassic;  PMBDataField = ^TMBDataField;  TMBDataField = array of Byte;  PMBCRCField = ^TMBCRCField;  TMBCRCField  = Word;  TMBSliceOfDeviceStatus = packed record   SliceTime     : TDateTime;   DeviceNum     : Byte;   Error         : Cardinal;   ErrorTime     : TDateTime;   DiscretRanges : TMBRegistersRangeClassicArray;   CoilRanges    : TMBRegistersRangeClassicArray;   InputRanges   : TMBRegistersRangeClassicArray;   HoldingRanges : TMBRegistersRangeClassicArray;   DiscretRegVal : TBitRegsValueRange;   CoilRegVal    : TBitRegsValueRange;   InputRegVal   : TWordRegsValueRange;   HoldingRegVal : TWordRegsValueRange;  end;  PIP4AddrRecord = ^TIP4AddrRecord;  TIP4AddrRecord = packed record   case integer of       0: (Byte1 : Byte;           Byte2 : Byte;           Byte3 : Byte;           Byte4 : Byte);       1: (Addr : Cardinal);  end;  TSignedType = (stNone,stSmall,stShort,stInt);  PInteger32 = ^TInteger32;  TInteger32 = packed record   case integer of       0: (Bytes : array [0..3] of Byte);{           Byte1 : Byte;           Byte2 : Byte;           Byte3 : Byte;           Byte4 : Byte);}       1: (Words : array [0..1] of Word);{           Word1 : Word;           Word2 : Word);}       2: (Value : Integer);  end;  PCardinal = ^TCardinal;  TCardinal = packed record   case integer of       0: (Bytes : array [0..3] of Byte);{           Byte1 : Byte;           Byte2 : Byte;           Byte3 : Byte;           Byte4 : Byte);}       1: (Words : array [0..1] of Word);{           Word1 : Word;           Word2 : Word);}       2: (Value : Cardinal);  end;  PTCounter64 = ^TCounter64;  TCounter64 = packed record   case integer of       0: (Bytes : array [0..7] of Byte);{           Byte1 : Byte;           Byte2 : Byte;           Byte3 : Byte;           Byte4 : Byte;           Byte5 : Byte;           Byte6 : Byte;           Byte7 : Byte;           Byte8 : Byte);}       1: (Words : array [0..3] of Word);{           Word1 : Word;           Word2 : Word;           Word3 : Word;           Word4 : Word);}       2: (Cardinals : array [0..1] of Cardinal);{           Cardinal1 : Cardinal;           Cardinal2 : Cardinal);}       3: (Value : QWord);  end;  PTCP4AddrInfo = ^TTCP4AddrInfo;  TTCP4AddrInfo = packed record   IP   : TIP4AddrRecord;   Port : Word;  end;  PPollingTimeParam = ^TPollingTimeParam;  TPollingTimeParam = packed record   Interval          : Cardinal;   TimeOut           : Cardinal;   ReconnectInterval : Cardinal;  end;  PMBTCPSlavePollingParam = ^TMBTCPSlavePollingParam;  TMBTCPSlavePollingParam = packed record   SlaveAddr        : TTCP4AddrInfo;   PoolingTimeParam : TPollingTimeParam;  end;  PMBPollingItem = ^TMBPollingItem;  TMBPollingItem = packed record   DevNumber : Byte;   FunctNum  : Byte;   StartAddr : Word;   Quantity  : Word;  end;  PMBTCPSlavePollingItem = ^TMBTCPSlavePollingItem;  TMBTCPSlavePollingItem = packed record   ID          : String;   Caption     : String;   SlaveParams : TMBTCPSlavePollingParam;   Item        : TMBPollingItem;  end;  function GetMBRangeTypeAsString(AType : TRegMBTypes):String;  function GetSignedTypeFromStr(AType : AnsiString): TSignedType;  function GetStrFromSignedType(AType : TSignedType): AnsiString;  function GetRangeTypeAsStrID(AType : TRegMBTypes):String;  function GetRangeTypeFromStrID(AType : String):TRegMBTypes;  function  CopyDataArray(ASource : TRegAddressArray; AOffset : Cardinal; ACount : Integer = -1) : TRegAddressArray;  procedure AddArrayToArray(ADest,ASource : TRegAddressArray; ANotDuplicate : Boolean = True);  function  GetAddressArrayAsString(AArray : TRegAddressArray;AIsHex : Boolean = True): String;  function  IsValueInArray(AArray : TRegAddressArray; AValue : Word) : Boolean;  procedure AddValueToAllItems(AArray : TRegAddressArray; AValue : Word);  procedure AddArrayToArrayPlusStart(ADest : TRegAddressArray; const ASource : TRegAddressArray; AStartAddr : Word = 0; ANotDuplicate : Boolean = True);implementationuses sysutils;procedure AddArrayToArrayPlusStart(ADest : TRegAddressArray; const ASource : TRegAddressArray; AStartAddr : Word = 0; ANotDuplicate : Boolean = True);var NewLen, i : Integer;begin  NewLen := Length(ASource);  for i := 0 to NewLen-1 do   begin    if ANotDuplicate then     if IsValueInArray(ADest,ASource[i]+AStartAddr) then Continue;    SetLength(ADest,Length(ADest)+1);    ADest[Length(ADest)-1] := ASource[i]+AStartAddr;   end;end;procedure AddValueToAllItems(AArray : TRegAddressArray; AValue : Word);var i : Integer;begin  for i := Low(AArray) to High(AArray) do AArray[i] := AArray[i]+AValue;end;function  IsValueInArray(AArray : TRegAddressArray; AValue : Word) : Boolean;var i : Integer;begin  Result := False;  for i := Low(AArray) to High(AArray) do   if AArray[i] = AValue then    begin     Result := True;     Break;    end;end;function  GetAddressArrayAsString(AArray : TRegAddressArray;AIsHex : Boolean = True): String;var i, TempCount : Integer;begin  Result := '';  if Length(AArray) = 0 then Exit;  TempCount := Length(AArray);  Result := Format('(%u):',[TempCount]);  if AIsHex then   begin    for i := 0 to TempCount - 1 do Result := Format('%s%s:',[Result,IntToHex(AArray[i],4)])   end  else   begin    for i := 0 to TempCount - 1 do Result := Format('%s%d:',[Result,AArray[i]])   end;end;procedure AddArrayToArray(ADest,ASource : TRegAddressArray; ANotDuplicate : Boolean = True);var NewLen,{OldLen,}i : Integer;begin//  OldLen := Length(ADest);  NewLen := {OldLen + }Length(ASource);//  SetLength(ADest,NewLen);  for i := 0{OldLen} to NewLen-1 do   begin    if ANotDuplicate then     if IsValueInArray(ADest,ASource[i]) then Continue;    SetLength(ADest,Length(ADest)+1);    ADest[Length(ADest)-1] := ASource[i{-OldLen}];   end;end;function  CopyDataArray(ASource : TRegAddressArray; AOffset : Cardinal; ACount : Integer = -1) : TRegAddressArray;var TempLen : Cardinal;    TempCount, i : Integer;begin  SetLength(Result,0);  TempLen := Length(ASource);  if  (TempLen = 0) or (AOffset > (TempLen -1)) or ((AOffset + ACount) > (TempLen -1)) or (ACount < -1) or (ACount = 0)  then Exit;  if ACount > 0 then   begin    SetLength(Result,ACount);    TempCount := ACount-1;   end  else   begin    SetLength(Result,(TempLen - AOffset));    TempCount := TempLen - AOffset -1;   end;  for i := 0 to TempCount do Result[i] := ASource[AOffset+i];end;function GetRangeTypeFromStrID(AType : String):TRegMBTypes;begin  if SameText(AType,'Dis') then Result := rgDiscrete   else     if SameText(AType,'Coi') then Result := rgCoils      else        if SameText(AType,'Inp') then Result := rgInput          else            if SameText(AType,'Hol') then Result := rgHolding             else               Result := rgNone;end;function GetRangeTypeAsStrID(AType : TRegMBTypes):String;begin  Result := '';  case AType of   rgDiscrete : Result := 'Dis';   rgCoils    : Result := 'Coi';   rgInput    : Result := 'Inp';   rgHolding  : Result := 'Hol';   rgNone     : Result := 'None';  end;end;function GetStrFromSignedType(AType : TSignedType): AnsiString;begin  Result := '';  case AType of   stSmall : Result := 'sml';   stShort : Result := 'sht';   stInt   : Result := 'int';   stNone  : Result := 'none';  end;end;function GetSignedTypeFromStr(AType : AnsiString): TSignedType;begin  if SameText(AType,'sml') then Result := stSmall   else     if SameText(AType,'sht') then Result := stShort      else        if SameText(AType,'int') then Result := stInt          else Result := stNone;end;function GetMBRangeTypeAsString(AType : TRegMBTypes):String;begin  Result := '';  case AType of   rgDiscrete : Result := 'Discrete';   rgCoils    : Result := 'Coils';   rgInput    : Result := 'Input';   rgHolding  : Result := 'Holding';   rgNone     : Result := 'None';  end;end;end.